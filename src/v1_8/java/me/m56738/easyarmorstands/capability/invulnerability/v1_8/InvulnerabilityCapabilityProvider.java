package me.m56738.easyarmorstands.capability.invulnerability.v1_8;

import me.m56738.easyarmorstands.capability.CapabilityProvider;
import me.m56738.easyarmorstands.capability.Priority;
import me.m56738.easyarmorstands.capability.invulnerability.InvulnerabilityCapability;
import org.bukkit.Bukkit;
import org.bukkit.entity.Entity;
import org.bukkit.plugin.Plugin;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class InvulnerabilityCapabilityProvider implements CapabilityProvider<InvulnerabilityCapability> {
    private InvulnerabilityCapabilityImpl instance;

    public InvulnerabilityCapabilityProvider() {
        try {
            instance = new InvulnerabilityCapabilityImpl();
        } catch (Throwable ignored) {
        }
    }

    @Override
    public boolean isSupported() {
        return instance != null;
    }

    @Override
    public Priority getPriority() {
        return Priority.LOW;
    }

    @Override
    public InvulnerabilityCapability create(Plugin plugin) {
        return instance;
    }

    private static class InvulnerabilityCapabilityImpl implements InvulnerabilityCapability {
        private final MethodHandle getHandle;
        private final Field invulnerableField;

        public InvulnerabilityCapabilityImpl() throws Throwable {
            String serverPackage = Bukkit.getServer().getClass().getName();
            serverPackage = serverPackage.substring(0, serverPackage.lastIndexOf('.'));
            Class<?> entityClass = Class.forName(serverPackage + ".entity.CraftEntity");
            Method getHandleMethod = entityClass.getDeclaredMethod("getHandle");
            Class<?> entityHandleClass = getHandleMethod.getReturnType();
            MethodHandles.Lookup lookup = MethodHandles.lookup();
            getHandle = lookup.unreflect(getHandleMethod);
            invulnerableField = entityHandleClass.getDeclaredField("invulnerable");
            invulnerableField.setAccessible(true);
        }

        @Override
        public boolean isInvulnerable(Entity entity) {
            try {
                return invulnerableField.getBoolean(getHandle.invoke(entity));
            } catch (Throwable e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public void setInvulnerable(Entity entity, boolean invulnerable) {
            try {
                invulnerableField.setBoolean(getHandle.invoke(entity), invulnerable);
            } catch (Throwable e) {
                throw new RuntimeException(e);
            }
        }
    }
}
