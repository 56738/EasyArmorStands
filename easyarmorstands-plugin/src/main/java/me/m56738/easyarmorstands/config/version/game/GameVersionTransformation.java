package me.m56738.easyarmorstands.config.version.game;

import me.m56738.easyarmorstands.config.override.Version;
import me.m56738.easyarmorstands.config.version.game.v1_13.ItemStackTransformAction;
import org.bukkit.Bukkit;
import org.spongepowered.configurate.ConfigurateException;
import org.spongepowered.configurate.ConfigurationNode;
import org.spongepowered.configurate.transformation.ConfigurationTransformation;

import java.util.ArrayList;
import java.util.List;

import static org.spongepowered.configurate.NodePath.path;

public class GameVersionTransformation implements ConfigurationTransformation {
    private final List<Entry> entries;
    private final Version targetVersion = getTargetVersion();

    private GameVersionTransformation(List<Entry> entries) {
        this.entries = entries;
    }

    public static GameVersionTransformation create() {
        List<Entry> entries = new ArrayList<>();
        entries.add(new Entry(new Version(1, 13, 0), ConfigurationTransformation.builder()
                .addAction(path("editor", "menu", "background", "config", "item"),
                        new ItemStackTransformAction())
                .build()));
        return new GameVersionTransformation(entries);
    }

    @Override
    public void apply(ConfigurationNode node) throws ConfigurateException {
        ConfigurationNode gameVersionNode = node.node("version", "game");
        String gameVersionRaw = gameVersionNode.getString();
        if (gameVersionRaw == null) {
            // assume latest
            return;
        }

        Version gameVersion = Version.parse(gameVersionRaw);
        if (gameVersion.compareTo(targetVersion) >= 0) {
            // don't update config generated by a future version
            return;
        }

        for (Entry entry : entries) {
            if (entry.getVersion().compareTo(targetVersion) > 0) {
                // don't update config to a future version
                continue;
            }

            if (entry.getVersion().compareTo(gameVersion) > 0) {
                entry.transformation.apply(node);
            }
        }

        gameVersionNode.raw(targetVersion.toString());
    }

    private static class Entry {
        private final Version version;
        private final ConfigurationTransformation transformation;

        private Entry(Version version, ConfigurationTransformation transformation) {
            this.version = version;
            this.transformation = transformation;
        }

        public Version getVersion() {
            return version;
        }
    }

    private static Version getTargetVersion() {
        String bukkitVersion = Bukkit.getBukkitVersion();
        String version = bukkitVersion.substring(0, bukkitVersion.indexOf('-'));
        return Version.parse(version);
    }
}
